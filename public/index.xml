<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog by Ekta</title>
    <link>https://blog.ektagarg.com/</link>
    <description>Recent content on Blog by Ekta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Dec 2020 02:01:58 +0530</lastBuildDate>
    
        <atom:link href="https://blog.ektagarg.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>CDN: Content Delivery Network</title>
        <link>https://blog.ektagarg.com/posts/cdn/</link>
        <pubDate>Sat, 03 Apr 2021 02:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/cdn/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/cdn/ -&lt;h2 id=&#34;what-is-a-cdn&#34;&gt;What is a CDN?&lt;/h2&gt;
&lt;p&gt;It is a service that accelerates internet content delivery to make your website faster.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-challenge-that-cdn-addresses&#34;&gt;What is the challenge that CDN addresses?&lt;/h2&gt;
&lt;p&gt;For eg: we have software that has users from all around the world, but we don&amp;rsquo;t have servers all around the world and the experience that those users have due to that dynamic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s understand the problem with an example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/cdn/cdn.jpg&#34; alt=&#34;Users located worldwide&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have a simple diagram showing I have a server hosted in Singapore and I have users all around the world. In total, I have got 50 users who are accessing my website [10 in New York, 5 in London, 10 in Singapore, 15 in Delhi, 10 in Hong Kong]&lt;/p&gt;
&lt;p&gt;Users in London make a request to the server, they are 67 hundred miles from the server in Singapore so they make calls from up and down from this far. And the amount of time it takes is measured in milliseconds and just that round trip would be about 140 ms, for our users in New York, that would be about 230 ms and it would take lesser time in Delhi and Singapore as it is closer in proximity. So, this means the further the users are away, the longer it takes and ultimately the slower the website would be for the users.&lt;/p&gt;
&lt;p&gt;This is the problem that CDN solves by &lt;strong&gt;reducing the amount of distance between the resources a website needs&lt;/strong&gt; in order to serve its users. So what is CDN exactly doing here?&lt;/p&gt;
&lt;p&gt;It places CDN around the world in as many locations as possible.&lt;/p&gt;
&lt;p&gt;In our above example, let&amp;rsquo;s assume we have placed CDN in every location the users are trying to access our content from so it&amp;rsquo;s in New York, Delhi, Singapore, Hong Kong, London.&lt;/p&gt;
&lt;p&gt;So now when a user from London tries to access the website, it&amp;rsquo;s first retrieved by the content delivery network service and then distributed around the world. So we have a single request down to the Singapore server. It&amp;rsquo;s now distributed around the world and our users now instead of going all the way to Singapore can retrieve content directly from their closest geographical location, drastically reducing the amount of time it takes to retrieve the content.&lt;/p&gt;
&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Increased response time for users located worldwide.&lt;/li&gt;
&lt;li&gt;Reduction in load on just one server or we can say that load is getting distributed.&lt;/li&gt;
&lt;li&gt;Reduction in the amount of capacity required on a single server in low.&lt;/li&gt;
&lt;li&gt;Increase in the uptime in server as the users are now making calls in a distributed manner.&lt;/li&gt;
&lt;li&gt;Increase in security through obscurity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks for reading. Stay tuned!&lt;/p&gt;
- https://blog.ektagarg.com/posts/cdn/ - </description>
        </item>
    
    
    
        <item>
        <title>Improve your web performance by switching from HTTP 1.1 to HTTP 2.0</title>
        <link>https://blog.ektagarg.com/posts/performance-improvement-with-http2/</link>
        <pubDate>Tue, 16 Feb 2021 02:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/performance-improvement-with-http2/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/performance-improvement-with-http2/ -&lt;p&gt;HTTP 2.0 is the improvement in HTTP 1.0 which was introduced late in 2015. To understand HTTP 2.0 better, let&amp;rsquo;s first deep dive into the history of HTTP.&lt;/p&gt;
&lt;h2 id=&#34;history-of-http&#34;&gt;History of HTTP&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/http2/HTTP2.png&#34; alt=&#34;History of HTTP&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;http-09&#34;&gt;HTTP 0.9&lt;/h3&gt;
&lt;p&gt;HTTP 0.9 was introduced in 1991. At that time most of the websites were having basic text-based content hyperlinked to each other. It was working as its name suggests - Hyper Text Transfer Protocol.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Basic Operations GET, POST, HEAD were supported.&lt;/li&gt;
&lt;li&gt;Its purpose was to serve basic websites hyperlinked with each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-10&#34;&gt;HTTP 1.0&lt;/h3&gt;
&lt;p&gt;After 5 years, HTTP 1.0 was introduced with a few other basic operations like PUT, DELETE, LINK, and UNLINK methods.&lt;/p&gt;
&lt;h3 id=&#34;http-11&#34;&gt;HTTP 1.1&lt;/h3&gt;
&lt;p&gt;Immediately after 1 year, in 1997, HTTP 1.1 was introduced. This is the current HTTP protocol which we are still using.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 1.1 was introduced with few changes because that was the internet revolution phase, the internet ecosystem was rapidly growing. Websites like an email client, search engines, social media giants were getting created with heavily loaded dynamic content. Most platforms had high usage of images, interactive content, more features that required high resource usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of things were introduced to make the internet fast and allowing users to access the server faster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support of OPTIONS&lt;/li&gt;
&lt;li&gt;CORS, Keep-alive was part of this version of HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;but-what-was-not-right-with-http-11&#34;&gt;But what was not right with HTTP 1.1?&lt;/h2&gt;
&lt;p&gt;In HTTP 1.1 for achieving speed on the website, if you are already a web developer you must be knowing these, that we are advised to do compression, caching, minifying CSS/JS, image sprites for icons, and another resource because the TCP connection used between the client and server are limited.&lt;/p&gt;
&lt;h4 id=&#34;1-hol--head-of-line&#34;&gt;1. HOL- Head of Line&lt;/h4&gt;
&lt;p&gt;Whenever a client requests a URL, an HTTP request is sent via a TCP connection, which is created between the client and the server. Initially, there was only a single TCP connection.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s understand this with an example:&lt;/p&gt;
&lt;p&gt;If a user requests for say, home.html, which we know for sure that internally requires a CSS and a JS file. So the first request will be created for the home.html file, as there is a single TCP connection, it will wait for the response of that home.html i.e. TCP connection stays blocked until it receives a response. and after it receives home.html, the next request will be sent for CSS file and then next would be for JS file in a similar manner.&lt;/p&gt;
&lt;p&gt;Later on, this was increased to 6 parallel TCP connections, but these days websites are at a much larger scale and even 6 TCP connections are not enough.&lt;/p&gt;
&lt;h4 id=&#34;2-repetition-of-header-data&#34;&gt;2. Repetition of Header Data&lt;/h4&gt;
&lt;p&gt;HTTP is a stateless connection, which means every request is independent of the previous and the next request, so each request has to contain request header data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Request Header:
user-agent:xxx
cookie:xxx
cache-control:xxx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same header is packed with all the requests and responses and it is useless sometimes when it is precisely same in all the requests. Header data can not be compressed, while you can compress the body of the request.&lt;/p&gt;
&lt;h1 id=&#34;how-come-http-20-going-to-solve-all-the-problems&#34;&gt;How come HTTP 2.0 going to solve all the problems?&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/http2/http-2-file.png&#34; alt=&#34;HTTP 2.0&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;http-20&#34;&gt;HTTP 2.0&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Single Secured TCP Connection&lt;/strong&gt;: This is the solution to problem 1: HOL- Head of Line&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In HTTP 2.0, a single secured TCP connection has been used, in which streams are created.
Each HTTP request will be sent into streams over a single secured TCP connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is faster, as you are not setting up multiple TCP connections here, and the client is managing the streams which are multiplexing of streams into a single TCP connection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE: It is mandatory to have HTTPS setup for HTTP2&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;HPACK&lt;/strong&gt;: This is the solution to problem 2: Repetition of Header Data&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Header data is separated from basic request data. It allows compression of header data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the preceding request had some header data, HPACK automatically enables the caching of that header data. Each request will not contain the same header data repeatedly which will make request data and delivery of data much faster on websites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;PUSH&lt;/strong&gt;: PUSH frames enable us to send mandatory resources along with the HTTP response. They should be used with care as they can increase the size of the HTTP response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For eg: You request a home.html page from a website and you know that to show this page on the browser, you must need a CSS and a JS file.
You can make your request in such a way that server will send home.html along with the required CSS and JS file.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Along with all this, we can keep on using gzip, browser caching, minifying CSS/JS to further improve the performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Almost all of the modern browsers support HTTP 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are moving from HTTP 1.1 to HTTP 2.0, the users using old browsers which are typically using HTTP 1.1 will be served via HTTP 1.1 only as HTTP 2.0 is built on top of HTTP 1.1&lt;/p&gt;
&lt;p&gt;With more and more adoption of HTTP 2.0, all of the modern servers are becoming compliant to HTTP 2.0 If you are looking for improving the performance of your website, you should definitely move from HTTP 1.1 to HTTP 2.0&lt;/p&gt;
- https://blog.ektagarg.com/posts/performance-improvement-with-http2/ - </description>
        </item>
    
    
    
        <item>
        <title>Slack bot using [Zapier &#43; Redash &#43; Google sheets &#43; Slack]</title>
        <link>https://blog.ektagarg.com/posts/slack-bot-using-zapier/</link>
        <pubDate>Fri, 01 Jan 2021 09:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/slack-bot-using-zapier/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/slack-bot-using-zapier/ -&lt;p&gt;&lt;strong&gt;What are we going to do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating a slack bot that will post a message on a specific channel at a certain time
(say, 9 am) about the total number of orders placed on your website in the last 24 hours.&lt;/p&gt;
&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using slack for communication, organization of your work.&lt;/li&gt;
&lt;li&gt;Know how to write DB queries, I will be using &lt;a href=&#34;https://redash.io/&#34;&gt;redash&lt;/a&gt; for writing queries.&lt;/li&gt;
&lt;li&gt;Know the basics of google sheets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tools-and-terms&#34;&gt;Tools and terms&lt;/h2&gt;
&lt;p&gt;These are some terms we will be using while creating this slackbot. Please read them if you have never used zapier earlier.&lt;/p&gt;
&lt;h3 id=&#34;zapier&#34;&gt;Zapier&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://zapier.com/&#34;&gt;Zapier&lt;/a&gt; simply helps you save your time with automation. You can connect multiple apps to automate repetitive/boring tasks without coding or relying on developers to build integration.&lt;/p&gt;
&lt;h3 id=&#34;zap&#34;&gt;Zap&lt;/h3&gt;
&lt;p&gt;A Zap is an automated workflow that connects your apps and services. You can create a zap that will fetch some data and then trigger events based on conditional actions you have specified. When you turn your Zap on, it will run the action steps every time the trigger event occurs.&lt;/p&gt;
&lt;h3 id=&#34;trigger&#34;&gt;Trigger&lt;/h3&gt;
&lt;p&gt;A trigger is an event that starts a Zap. For example, in this case, where we are creating a slack bot, each time when there is new data from the query, you will receive a message on slack about the updated data.&lt;/p&gt;
&lt;h3 id=&#34;redash&#34;&gt;Redash&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://redash.io/&#34;&gt;Redash&lt;/a&gt; helps you write queries to your data source, can schedule your queries (fetch at a particular time of the day, week), create dashboards, visualizations, etc.&lt;/p&gt;
&lt;h2 id=&#34;steps-to-follow&#34;&gt;Steps to follow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create a query on redash which will give you a total number of orders placed in the last 24 hours.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/query.png&#34; alt=&#34;Query result&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;I am setting a refresh schedule of every day at 08:45 am. Because I need this total order stats update once a day in the morning.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/refresh-schedule.png&#34; alt=&#34;Query result&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create a google sheet that will be fetching data from this redash query. We will be using IMPORTDATA() function which allows you to quickly import the data from the URL of a CSV.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;IMPORTDATA(&amp;quot;https://reports.xyz.io/api/queries/13292/results.csv?api_key=nlnOwQqweKZGsTIk7oE6ErVRaqK3D8weVdaqkcO5C
&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your sheet will look like this:
&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/sheet.png&#34; alt=&#34;Query result&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Next, set up an account on &lt;a href=&#34;https://zapier.com&#34;&gt;zapier&lt;/a&gt;. Now, we have to create a zap using Google sheets + Slack. Because we want to trigger an event which is a slack message whenever there is any change in the spreadsheet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Google sheets as your app in &lt;code&gt;Trigger&lt;/code&gt;, add a trigger event which can be a New spreadsheet, New worksheet, New spreadsheet row (depending on the data updates in your sheet).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect your google account which has this daily updates sheet and set up a trigger by selecting a spreadsheet, worksheet, a trigger column. Click on the test trigger to load the latest data present in your sheet. This will look like this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/zap.png&#34; alt=&#34;Query result&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;After setting the Google sheet, we have to send a message on slack that we got new data in the sheet. Similar to Google sheets, Choose app and event (slack), choose your slack account, and set up actions like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/slack-actions.png&#34; alt=&#34;Query result&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;You are all set up after adding all the actions, Now we are good to test the action. Before clicking on Test and continue, Verify all the options, data, and format.
Let&amp;rsquo;s click test and continue and check on slack if we got the message. Yes, here is the message, I got:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/slack-Bot/slack-msg.png&#34; alt=&#34;slack message&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it!! You just created a slack bot that will take care of updating you every day about the total number of orders on your website in a day.
Similarly, you can automate a lot of your boring stuff using zapier.&lt;/p&gt;
- https://blog.ektagarg.com/posts/slack-bot-using-zapier/ - </description>
        </item>
    
    
    
        <item>
        <title>Tech talks 2020</title>
        <link>https://blog.ektagarg.com/posts/goodbye-2020/</link>
        <pubDate>Thu, 31 Dec 2020 09:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/goodbye-2020/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/goodbye-2020/ -&lt;p&gt;This year has been a roller coaster ride for me, and I guess, for most people. Things were so uncertain. Even during this time of uncertainty, some of the tech communities have gone completely online and done a tremendous job of organizing conferences. This blog is about all the talks I gave at various conferences this year and all of them are related to &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;
&lt;p&gt;One of the great things which I feel &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; offers is &lt;strong&gt;clarity&lt;/strong&gt; and &lt;strong&gt;ease-of-use&lt;/strong&gt;. I have started working in Go around a year and a half back and I am still exploring a lot of its features.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go is a general-purpose programming language. Write whatever you want in it and don&amp;rsquo;t worry about pinning the language, or any other technology for that matter, to a single problem domain. &lt;!-- raw HTML omitted --&gt; ~Rob Pike&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;gophercon-eu-lightning-talk&#34;&gt;Gophercon EU Lightning Talk&lt;/h2&gt;
&lt;p&gt;After attending a handful of conferences earlier this year, I applied for a lightning talk at &lt;strong&gt;Gophercon EU&lt;/strong&gt;. My talk proposal got accepted and it was both nervous and exciting at the same time, as this was going to be my first talk at any conference.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I am very excited to share that my lightning talk at &lt;a href=&#34;https://twitter.com/gopherconeu?ref_src=twsrc%5Etfw&#34;&gt;@gopherconeu&lt;/a&gt; has been accepted! 😍&lt;/p&gt;&amp;mdash; Ekta Garg (@_ektagarg) &lt;a href=&#34;https://twitter.com/_ektagarg/status/1271769409992880136?ref_src=twsrc%5Etfw&#34;&gt;June 13, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;about-the-topic&#34;&gt;About the topic:&lt;/h4&gt;
&lt;p&gt;I have been exploring web assembly for quite some time. I created a simple project in &lt;strong&gt;GO using WASM&lt;/strong&gt; where I used &lt;a href=&#34;https://golang.org/pkg/image/&#34;&gt;image library&lt;/a&gt; of Go and used its filter functions and wrote a program to apply filters on any image and then loaded it into the browser using WASM. So my talk was around this topic only &amp;ldquo;Running Go in browsers using WASM&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;And, It was time to review my own talk. There are so many things which I got to learn about presenting a talk, time management, live coding, demo, etc.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Next on the &lt;a href=&#34;https://twitter.com/hashtag/GopherConEU?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#GopherConEU&lt;/a&gt; lightning talks video spotlight:&lt;br&gt;&lt;br&gt;Ekta Garg &lt;a href=&#34;https://twitter.com/_ektagarg?ref_src=twsrc%5Etfw&#34;&gt;@_ektagarg&lt;/a&gt;, Software Engineer at &lt;a href=&#34;https://twitter.com/groferseng?ref_src=twsrc%5Etfw&#34;&gt;@groferseng&lt;/a&gt; in India, talks about running &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#golang&lt;/a&gt; in browsers using &lt;a href=&#34;https://twitter.com/hashtag/Webassembly?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Webassembly&lt;/a&gt;!&lt;a href=&#34;https://twitter.com/WasmWeekly?ref_src=twsrc%5Etfw&#34;&gt;@WasmWeekly&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Grofers?ref_src=twsrc%5Etfw&#34;&gt;@grofers&lt;/a&gt;&lt;a href=&#34;https://t.co/KFoszLrFbz&#34;&gt;https://t.co/KFoszLrFbz&lt;/a&gt;&lt;/p&gt;&amp;mdash; GopherCon Europe (@gopherconeu) &lt;a href=&#34;https://twitter.com/gopherconeu/status/1296721449898704898?ref_src=twsrc%5Etfw&#34;&gt;August 21, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here, If want to check out the talk:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/9cSO2Mg0h1M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I want to thank &lt;a href=&#34;https://twitter.com/NataliePis&#34;&gt;Natalie&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/pbabbicola&#34;&gt;Paula&lt;/a&gt; ,and the entire &lt;a href=&#34;https://twitter.com/gopherconeu&#34;&gt;Gophercon EU&lt;/a&gt; team for organizing, giving me an opportunity to talk, and they have been super supportive the whole time.&lt;/p&gt;
&lt;h2 id=&#34;gophercon-turkey-talk&#34;&gt;Gophercon Turkey Talk&lt;/h2&gt;
&lt;p&gt;In Gophercon lightning talk, I couldn&amp;rsquo;t present the whole topic and things I wanted to cover as it was a small 7-min talk. So I applied at Gophercon Turkey for a talk and my proposal at Gophercon Turkey got accepted.&lt;/p&gt;
&lt;p&gt;Here, If you want to check out the talk:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/UJb0EZclURA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This time, I was able to cover the topic entirely in this talk, I did a little code walkthrough followed up with the demo.&lt;/p&gt;
&lt;p&gt;Great feeling when someone finds it useful:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/tech-talks-2020/turkey-fan.png&#34; alt=&#34;Project structure for GIN-TODO-APP&#34;&gt;&lt;/p&gt;
&lt;p&gt;A big thanks to &lt;a href=&#34;https://twitter.com/GoTurkiye&#34;&gt;Gophercon Turkey&lt;/a&gt; for organizing the conference and giving me the opportunity to present what I wanted to.&lt;/p&gt;
&lt;h2 id=&#34;women-who-go-delhi-chapter&#34;&gt;Women-Who-GO Delhi chapter&lt;/h2&gt;
&lt;p&gt;This is a local GO community, where they organize meetups and encourage people to talk/listen/learn about Golang. Here I gave two talks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one was about using the REST framework (GIN) in Golang.&lt;/li&gt;
&lt;li&gt;Another talk was about Testing in Golang.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These talks were very beginner centric talks.&lt;/p&gt;
&lt;p&gt;Here, If you want to check out the testing talk:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/l9mxb34YHNA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;I would like to thank &lt;a href=&#34;https://twitter.com/iamrashminagpal&#34;&gt;Rashmi Nagpal&lt;/a&gt; for organizing these meetups and encouraging people in speaking and attending talks.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Be part of tech communities, open-source, learn, explore as much as you can. If you are a newbie or an experienced in Go, I would encourage you to join this &lt;a href=&#34;gophers.slack.com&#34;&gt;slack channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Goodbye 2020! You&amp;rsquo;ve treated me fine.&lt;/p&gt;
- https://blog.ektagarg.com/posts/goodbye-2020/ - </description>
        </item>
    
    
    
        <item>
        <title>How web applications work?</title>
        <link>https://blog.ektagarg.com/posts/webapps/</link>
        <pubDate>Wed, 30 Dec 2020 16:08:56 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/webapps/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/webapps/ -&lt;p&gt;You must be thinking that such a basic question doesn&amp;rsquo;t need an entire article. But as you will read, you&amp;rsquo;ll understand why this basic question do deserve an article.&lt;/p&gt;
&lt;p&gt;Well, I asked this same question written above to a room full of programmers/developers. I could see the look of total contempt and amazement for asking such a basic question. But as I started getting answers from assembled technologies, I realised that the core understanding of how web apps work isn&amp;rsquo;t that simple.&lt;/p&gt;
&lt;p&gt;In a basic sense, a web application is a computer program where a client sends an HTTP request and a server sends an HTML page in the form of an HTTP response. You must be thinking &amp;ldquo;Isn&amp;rsquo;t it exactly like a web server?&amp;quot;. No, it&amp;rsquo;s not! A web server looks for the file in a directory and return those files, but a web application doesn&amp;rsquo;t simply return files; it first processes and request and performs programmed operations and then return the files.&lt;/p&gt;
&lt;p&gt;A web application is a program which needs to fulfill this criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The program must return HTML to a client that renders HTML and then displays it to a user.
The data must be transported to the client through a protocol i.e. HTTP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a program doesn&amp;rsquo;t render HTML, instead it provides data in some other form then it&amp;rsquo;s a web service, not a web application.
A little digging into the history of web applications
HTTP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Earlier in this article, I used term HTTP.&lt;/p&gt;
&lt;h3 id=&#34;what-is-http&#34;&gt;What is HTTP?&lt;/h3&gt;
&lt;p&gt;HTTP is the application-level communications, a stateless, text-based, request-response protocol that uses the client-server computing model. 
A client-server computing model is one where a client (a requester) always initiates the conversation with a server (the responder). Here, a browser works as a client and web server works as a server. Everything in HTTP request starts with a request.&lt;/p&gt;
&lt;h5 id=&#34;the-http-request-like-any-message-consists-of-a-few-lines-of-text-in-the-following-order&#34;&gt;The HTTP request, like any message, consists of a few lines of text in the following order:&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;Request-line
Zero or more request headers
An empty line
The message body (optional)
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;this-is-how-an-http-request-looks&#34;&gt;This is how an HTTP request looks:&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;GET /Protocols/rfc2616/rfc2616.html HTTP/1.1
Host: www.w3.org
User-Agent: Mozilla/5.0
(empty line)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this request, the first line is the request-line. The first word in the request-line is the request method, followed by the URI(Uniform Resource Identifier) and HTTP version. The next two lines are the request headers. Notice the last line is empty, which must exist even though there&amp;rsquo;s no message body. Whether the message body exists depends on the request method.
Let&amp;rsquo;s have a look at all the request methods:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; - Tells the server to return the specified resource.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; - The same as GET except that the server must not return a message body. This method is often used to get the response headers without carrying the weight of the rest of the message body over the network.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POST&lt;/code&gt; - Tells the server that the data in the message body should be passed to the resource identified by the URI. What the server does with the message body is up to the server.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt; - Tells the server that the data in the message body should be the resource at the given URI. If data already exists at the resource identified by the URI, that data is replaced. Otherwise, a new resource is created at the place where the URI is.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; - Tells the server to remove the resource identified by the URI.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt; - Tells the server to return the request. This way, the client can see what the intermediate servers did to the request.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt; - Tells the server to return a list of HTTP methods that the server supports.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CONNECT&lt;/code&gt; - Tells the server to set up a network connection with the client. This method is used mostly for setting up SSL tunneling (to enable HTTPS).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt; - Tells the server that the data in the message body modifies the resource identified by the URI.&lt;/p&gt;
- https://blog.ektagarg.com/posts/webapps/ - </description>
        </item>
    
    
    
        <item>
        <title>Golang: A Todo App using GIN</title>
        <link>https://blog.ektagarg.com/posts/todo-app-using-gin/</link>
        <pubDate>Wed, 30 Dec 2020 02:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/posts/todo-app-using-gin/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/posts/todo-app-using-gin/ -&lt;p&gt;Gin is a high-performance micro-framework that can be used to build web applications. It allows you to write middleware that can be plugged into one or more request handlers or groups of request handlers.&lt;/p&gt;
&lt;p&gt;It is the most popular framework in Golang. Look at the picture above, this framework has the highest no. of stars on Github.com&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;By the end of this tutorial, you will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn how to use Gin to create RESTful APIs (we will be creating a TODO application), and&lt;/li&gt;
&lt;li&gt;Understand the parts of a web application written in Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;For this tutorial, you will need Go and postman installed on your machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don’t have postman, you can use any other tool that you would use to test API endpoints.&lt;/p&gt;
&lt;h3 id=&#34;list-of-packages-we-are-going-to-use&#34;&gt;List of Packages we are going to use:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/go-sql-driver/mysql
go get github.com/gin-gonic/gin
go get github.com/jinzhu/gorm
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;project-structure&#34;&gt;Project Structure:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/gin/project-structure.png&#34; alt=&#34;Project structure for GIN-TODO-APP&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;list-of-apis&#34;&gt;List of APIs:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;GET: /v1/todo 
POST: /v1/todo
GET: /v1/todo/:id
PUT: /v1/todo/:id
DELETE: /v1/todo/:id
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s start working, I would suggest you write each n every line of code by yourself, this way you’ll understand things better. So we’ll start by creating a project called GIN-TODO-APP.&lt;/p&gt;
&lt;h2 id=&#34;setup-database&#34;&gt;Setup Database&lt;/h2&gt;
&lt;p&gt;GORM is an ORM library written in Golang which we are using in our project. In this config file, we will be creating a function called &lt;strong&gt;BuildDBConfig()&lt;/strong&gt; where you can set up your DB host, port, username, password, and dbname and pass it to &lt;strong&gt;DbURL()&lt;/strong&gt; to create your database URL.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/ektagarg/6b3caeaee1b7f0194ce8790c3d21c6b3.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;table-and-schema&#34;&gt;Table and Schema&lt;/h2&gt;
&lt;p&gt;Let’s talk about DB Structure and schema. For this project, we’ll be having just one table ‘todo’. This table will have id, title, description as its attributes.&lt;/p&gt;
&lt;p&gt;TableName() function will be used wherever we need to access the table name.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/ektagarg/ea63891b05bad4134f98f375fffac830.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;setup-routes-and-list-of-apis&#34;&gt;Setup routes and list of APIs&lt;/h2&gt;
&lt;p&gt;Here, we are going to set up a router using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r := gin.Default()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Default returns a gin Engine instance with the Logger(write the logs to gin.DefaultWriter) and Recovery middleware already attached but if you need to start a blank gin instance with middleware attached, you should use gin.New()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;v1 := r.Group(&amp;quot;/v1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can group multiple routes using Group() function, these APIs will be accessible on /v1&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/ektagarg/eea34ca294af4c9d3a4005b7fd90e55d.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;models-database-queries&#34;&gt;Models: Database queries&lt;/h2&gt;
&lt;p&gt;Let’s write all the Database queries which we will be required to create APIs which includes: fetching all the records from table todo, insert a record, fetch a specific record, update an existing record, delete a record.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/ektagarg/8da3903a5422930b55d3f7384896fb30.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;create-an-api-post-todo&#34;&gt;Create an API: POST Todo&lt;/h2&gt;
&lt;p&gt;GIN provides methods(Must bind, Should bind) to bind request body into type which supports JSON, XML, YAML and form values.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c.BindJSON(&amp;amp;todo)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So here it will bind request body to &lt;strong&gt;Models.Todo&lt;/strong&gt; (when binding from JSON, set json:&amp;ldquo;fieldname&amp;rdquo;) which is to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Todo struct {
     ID uint            `json:&amp;quot;id&amp;quot;`
     Title string       `json:&amp;quot;title&amp;quot;`
     Description string `json:&amp;quot;description&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can add validations to this struct as well, for eg: binding:”required” will return an error if it has empty value while binding.
Make a DB call to create a todo which is being handled by CreateATodo() written in Models/Todo.go. If it returns an error, call &lt;strong&gt;AbortWithStatus&lt;/strong&gt; which calls &lt;code&gt;Abort()&lt;/code&gt; and writes the error code (We are using net/http package for &lt;strong&gt;StatusNotFound&lt;/strong&gt; and StatusOK codes).&lt;/p&gt;
&lt;p&gt;POST API to create a TODO:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/ektagarg/84636e1253f5eb8d46ae1ba5ae80d447.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;run-the-server&#34;&gt;RUN the server&lt;/h2&gt;
&lt;p&gt;Let’s get ready to combine DB config, Models, Routes, APIs into main.go. &lt;strong&gt;gorm.Open()&lt;/strong&gt; initialize a new DB connection:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db, err := gorm.Open(&amp;quot;mysql&amp;quot;, &amp;quot;user:password@/dbname?charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;AutoMigrate()&lt;/strong&gt; automatically migrates your schema, to keep your schema update to date.&lt;/p&gt;
&lt;p&gt;One thing to note here is that AutoMigrate() will only create tables, missing columns and missing indexes, and won’t modify existing column’s data/type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.AutoMigrate(&amp;amp;Models.Todo{})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Setup the routes and run the server. Run() will listen and serve on 8080 by default.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r.Run()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;main.go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;./Config&amp;quot;
	&amp;quot;./Models&amp;quot;
	&amp;quot;./Routes&amp;quot;
	&amp;quot;github.com/jinzhu/gorm&amp;quot;
)

var err error

func main() {

	// Creating a connection to the database
	Config.DB, err = gorm.Open(&amp;quot;mysql&amp;quot;, Config.DbURL(Config.BuildDBConfig()))

	if err != nil {
		fmt.Println(&amp;quot;statuse: &amp;quot;, err)
	}

	defer Config.DB.Close()

	// run the migrations: todo struct
	Config.DB.AutoMigrate(&amp;amp;Models.Todo{})

	//setup routes 
	r := Routes.SetupRouter()

	// running
	r.Run()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Perfect!! We are all set now. Let’s run this project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And I can see an Engine instance has been created and the APIs are running:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ektagarg.com/images/gin/running-server.png&#34; alt=&#34;A running GO server&#34;&gt;&lt;/p&gt;
&lt;p&gt;Likewise, all are APIs are working as expected. If you find any kind of difficulty following the above steps,please check this &lt;a href=&#34;https://github.com/ektagarg/gin-gorm-todo-app&#34;&gt;repo&lt;/a&gt; and run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/ektagarg/gin-gorm-todo-app
&lt;/code&gt;&lt;/pre&gt;- https://blog.ektagarg.com/posts/todo-app-using-gin/ - </description>
        </item>
    
    
    
        <item>
        <title>Hey, I&#39;m Ekta.</title>
        <link>https://blog.ektagarg.com/about/</link>
        <pubDate>Sat, 12 Dec 2020 02:01:58 +0530</pubDate>
        
        <guid>https://blog.ektagarg.com/about/</guid>
        <description>Blog by Ekta https://blog.ektagarg.com/about/ -&lt;p&gt;I am a Software Development Engineer currently working at Grofers, India.
I love solving problems, curious about &amp;ldquo;how&amp;rdquo; [in science, space and technology], writing about my technical findings, giving tech talks.&lt;/p&gt;
&lt;p&gt;I have started this blog on 31st Dec, 2020 with the aim to keep posting about interesting problems I solve, tech topics I read about, TIL etc. I will try my best to keep my contributions.&lt;/p&gt;
&lt;p&gt;I will be mostly writing about these key areas in my upcoming blogs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Programming (Go, Python)&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Optimisation&lt;/li&gt;
&lt;li&gt;Low level design&lt;/li&gt;
&lt;li&gt;High level design&lt;/li&gt;
&lt;li&gt;Short weekend projects&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can contact me on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email: &lt;a href=&#34;mailto:gargekta65@gmail.com&#34;&gt;Ekta Garg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ektagarg&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/_ektagarg&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/ekta-garg-bb9a48a3/&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://blog.ektagarg.com/about/ - </description>
        </item>
    
    
  </channel>
</rss> 