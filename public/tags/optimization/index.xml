<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on Blog by Ekta</title>
    <link>https://blog.ektagarg.com/tags/optimization/</link>
    <description>Recent content in Optimization on Blog by Ekta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jan 2021 11:58:58 +0530</lastBuildDate>
    
	<atom:link href="https://blog.ektagarg.com/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Profiling and optimizing GO [PART-1]</title>
      <link>https://blog.ektagarg.com/posts/profiling-and-optimizing-go/</link>
      <pubDate>Sun, 03 Jan 2021 11:58:58 +0530</pubDate>
      
      <guid>https://blog.ektagarg.com/posts/profiling-and-optimizing-go/</guid>
      <description>Profiling A dynamic program analysis that measures space, time complexity, frequency and duration of function calls, usage of instructions.
Profiling is achieved by instrumenting either the program source code or its binary executable form using a tool called a profiler (or code profiler). Profilers may use a number of different techniques, such as event-based, statistical, instrumented, and simulation methods.
Profiling in Go One of the great things about Go is that it has really rich profiling tools included.</description>
    </item>
    
  </channel>
</rss>